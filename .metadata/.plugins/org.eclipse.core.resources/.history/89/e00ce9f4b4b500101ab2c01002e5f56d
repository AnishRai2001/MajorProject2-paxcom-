package com.example.jwtService.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import com.example.jwtService.Dto.LoginRequest;
import com.example.jwtService.Dto.RegisterRequest;
import com.example.jwtService.Entity.User;
import com.example.jwtService.Service.JwtService;
import com.example.jwtService.Service.UserService;
import com.example.jwtService.repository.UserRepository;
import com.example.jwtService.structure.ApiResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "*")
public class UserController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtService jwtService;

    @Autowired
    private UserService userService;

    @Autowired
    private UserRepository userRepository;

    // ✅ Register new user
    @PostMapping(value = "/register", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<ApiResponse<RegisterRequest>> registerUser(
            @RequestPart("user") String userJson,
            @RequestPart(value = "profilePictures", required = false) MultipartFile[] profilePictures
    ) throws JsonProcessingException {

        ObjectMapper mapper = new ObjectMapper();
        RegisterRequest registerRequest = mapper.readValue(userJson, RegisterRequest.class);
        registerRequest.setProfilePictures(profilePictures);

        RegisterRequest savedUser = userService.registerUser(registerRequest);
        ApiResponse<RegisterRequest> response =
                new ApiResponse<RegisterRequest>(true, "User registered successfully", savedUser);

        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    // ✅ Get all users
    @GetMapping
    public ResponseEntity<ApiResponse<List<RegisterRequest>>> getAllUsers() {
        List<RegisterRequest> users = userService.getAllUsers();
        ApiResponse<List<RegisterRequest>> response =
                new ApiResponse<List<RegisterRequest>>(true, "Users fetched successfully", users);
        return ResponseEntity.ok(response);
    }

    // ✅ Login
    @PostMapping("/login")
    public ResponseEntity<ApiResponse<String>> patientLogin(@RequestBody LoginRequest loginDto) {
        ApiResponse<String> response = new ApiResponse<String>();
        UsernamePasswordAuthenticationToken token =
                new UsernamePasswordAuthenticationToken(loginDto.email(), loginDto.password());

        var authentication = authenticationManager.authenticate(token);

        if (authentication.isAuthenticated()) {
            String jwtToken = jwtService.generateToken(
                    loginDto.email(),
                    authentication.getAuthorities().iterator().next().getAuthority()
            );

            response.setMessage("Welcome " + loginDto.email());
            response.setSuccess(true);
            response.setData(jwtToken);
            return ResponseEntity.ok(response);
        } else {
            response.setMessage("Authentication failed");
            response.setSuccess(false);
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
        }
    }

    // ✅ Get user by ID
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<User>> getUserById(@PathVariable Long id) {
        Optional<User> user = userRepository.findById(id);

        if (user.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<User>(false, "User not found", null));
        }

        return ResponseEntity.ok(new ApiResponse<User>(true, "User fetched successfully", user.get()));
    }
}

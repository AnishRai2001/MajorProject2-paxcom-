package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.Repository.AvailabilityRepository;
import com.example.demo.Repository.DoctorRepository;
import com.example.demo.dto.AvailabilityDto;
import com.example.demo.dto.DoctorDto;
import com.example.demo.entity.Availability;
import com.example.demo.entity.Doctor;

import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;

@Service
public class DoctorServiceImpl implements DoctorService {

	@Autowired
	private DoctorRepository doctorRepository;
	@Autowired
	private AvailabilityRepository availabilityRepository;

	@Override
	@Transactional
	public DoctorDto registerDoctor(DoctorDto doctorDto) {
		// TODO Auto-generated method stub
		Doctor d = new Doctor();
		d.setName(doctorDto.getName());
		d.setSpecialization(doctorDto.getSpecialization());
		d.setExperience(doctorDto.getExperience());
		d.setLocation(doctorDto.getLocation());
		d.setContactNumber(doctorDto.getContactNumber());
		d.setAvailable(doctorDto.isAvailable());

		if (doctorDto.getAvailability() != null) {
			for (AvailabilityDto a : doctorDto.getAvailability()) {
				Availability av = toEntity(a);
				d.addAvailability(av);
			}
		}
		Doctor saved = doctorRepository.save(d);
		return toDto(saved);
	}

	@Override
	public List<DoctorDto> getAllDoctor() {
	    List<Doctor> doctors = doctorRepository.findAll();
	    List<DoctorDto> dtos = new ArrayList<>();
	    for (Doctor d : doctors) {
	        dtos.add(toDto(d));
	    }
	    return dtos;
	}


	@Override
	public DoctorDto getDoctorById(Long id) {
		Doctor doctor = doctorRepository.findById(id)
				.orElseThrow(() ->new EntityNotFoundException("Doctor not found: " + id));
		return toDto(doctor);
	}

	@Override
	public DoctorDto updateDoctor(Long id, DoctorDto dto) {
		// TODO Auto-generated method stub
		Doctor doctor = doctorRepository.findById(id)
				.orElseThrow(() -> new EntityNotFoundException("Doctor not found: " + id));
		BeanUtils.copyProperties(dto, doctor, "id", "availabilitySlots");
		Doctor saved = doctorRepository.save(doctor);
		return toDto(saved);
	}

	@Override
	public void deleteDoctor(Long id) {
		// TODO Auto-generated method stub
		 Doctor doctor = doctorRepository.findById(id)
	                .orElseThrow(() ->new EntityNotFoundException("Doctor not found: " + id));
	        doctorRepository.delete(doctor);
	}

	@Override
	public List<DoctorDto> getAllDoctors(String specialization, String location) {
		List<Doctor> doctors;

		if (specialization != null && !specialization.trim().isEmpty()) {
			doctors = doctorRepository.findBySpecializationContainingIgnoreCase(specialization);
		} else if (location != null && !location.trim().isEmpty()) {
			doctors = doctorRepository.findByLocationContainingIgnoreCase(location);
		} else {
			doctors = doctorRepository.findAll();
		}

		List<DoctorDto> dtos = new ArrayList<>();

		for (Doctor d : doctors) {
			dtos.add(toDto(d));
		}

		return dtos; // ✅ properly inside the method
	}
	@Override
	public List<AvailabilityDto> getAvailability(Long doctorId) {
	    Doctor doctor = doctorRepository.findById(doctorId)
	            .orElseThrow(() ->new EntityNotFoundException("Doctor not found: " + doctorId));

	    List<AvailabilityDto> availabilityDtos = new ArrayList<>();

	    if (doctor.getAvailabilitySlots() != null) {
	        for (Availability slot : doctor.getAvailabilitySlots()) {
	            AvailabilityDto dto = new AvailabilityDto();
	            BeanUtils.copyProperties(slot, dto);
	            availabilityDtos.add(dto);
	        }
	    }

	    return availabilityDtos;
	}

	
	
	
	
	// ✅ helper method to convert DTO → Entity
	private Availability toEntity(AvailabilityDto dto) {
		if (dto == null) {
			return null;
		}
		Availability availability = new Availability();
		BeanUtils.copyProperties(dto, availability);
		return availability;
	}

	// ✅ Convert Entity → DTO (with nested availability)
	private DoctorDto toDto(Doctor doctor) {
	    DoctorDto dto = new DoctorDto();
	    BeanUtils.copyProperties(doctor, dto);

	    if (doctor.getAvailabilitySlots() != null && !doctor.getAvailabilitySlots().isEmpty()) {
	        List<AvailabilityDto> availabilityDtos = new ArrayList<>();
	        for (Availability availability : doctor.getAvailabilitySlots()) {
	            AvailabilityDto aDto = new AvailabilityDto();
	            BeanUtils.copyProperties(availability, aDto);
	            availabilityDtos.add(aDto);
	        }
	        dto.setAvailability(availabilityDtos);
	    }

	    return dto;
	}


}
